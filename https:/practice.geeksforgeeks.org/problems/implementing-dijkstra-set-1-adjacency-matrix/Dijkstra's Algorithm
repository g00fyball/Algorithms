#include<bits/stdc++.h>
using namespace std;

class graph
{
        int V;
        list<pair<int,int>> *adj;
    
    public:
        graph(int u)
        {
            V=u;
            adj= new list<pair<int,int>> [u];
        }
        void addEdge(int u,int v,int w)
        {
            adj[u].push_back(make_pair(v,w));
            adj[v].push_back(make_pair(u,w));
        }
        
        void helper(int src);
};

void graph::helper(int src)
{
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
    
    vector<int> dist(V,INT_MAX);
    
    q.push(make_pair(0,src));
    
    dist[src]=0;
    
    while(!q.empty())
    {
        int u=q.top().second;
        q.pop();
        
        for(auto it:adj[u])
        {
            int weight=it.second;
            int v=it.first;
            
            if(dist[v]>dist[u]+weight)
            {
                dist[v]=dist[u]+weight;
                q.push(make_pair(dist[v],v));
            }
        }
    }
    
    for(int i=0;i<V;i++)
    {
        cout<<dist[i]<<endl;
    }
}

int main()
{
    graph g(9);
    
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 8, 2);
    g.addEdge(2, 5, 4);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);
    
    g.helper(0);
    
    return 0;
}
