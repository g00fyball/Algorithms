#include<bits/stdc++.h>
using namespace std;

class graph
{
    private:
        int V;
        list<int> *adj;
        
    public:
        graph(int v)
        {
            V=v;
            adj=new list<int> [v];
        }
        
        void addEdge(int u,int v);
        
        string findloop();
        
        bool helper(int src,vector<int> &vis,int p);
};

void graph:: addEdge(int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool graph:: helper(int src,vector<int> &vis,int parent)
{
    vis[src]=1;
    
    for(int i:adj[src])
    {
        if(!vis[i])
        {
            if(helper(i,vis,src))
                return true;
        }
        else
        if(i!=parent)
            return true;
    }
    
    return false;
}

string graph::findloop()
{
    vector<int> vis(V,0);
    
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            if(helper(i,vis,-1))
                return "true";
        }
    }
    
    return "false";
}

int main()
{
    int v;
    cin>>v;
    
    graph g1(v);
    g1.addEdge(1, 0);
    g1.addEdge(0, 2);
    g1.addEdge(2, 1);
    g1.addEdge(0, 3);
    g1.addEdge(3, 4);    
    
    cout<<g1.findloop()<<endl;
    
    return 0;
}
