#include<bits/stdc++.h>
using namespace std;

class graph
{
    int v;
    list<pair<int,int>> *adj;
    
    public:
        graph(int u)
        {
            v=u;
            adj=new list<pair<int,int>> [u];
        }
        
        void addEdge(int u,int y,int w)
        {
            adj[u].push_back({y,w});
        }
        
        void helper(int src);
        
        void trp(vector<int> &vis,int src,stack<int> &s);
};

void graph:: trp(vector<int> &vis,int src,stack<int> &s)
{
    vis[src]=1;
    for(auto i:adj[src])
    {
        if(!vis[i.first])
        {
            trp(vis,i.first,s);
        }
    }
    s.push(src);
}

void graph:: helper(int src)
{
    vector<int> vis(v,0);
    
    stack<int> s;
    
    for(int i=0;i<v;i++)
    {
        if(vis[i]==0)
        {
            trp(vis,i,s);
        }
    }
    
    vector<int> dist(v,INT_MAX);
    
    dist[src]=0;
    
    while(!s.empty())
    {
        int p=s.top();
        s.pop();
        
        if(dist[p]!=INT_MAX)
        {
            for(auto it:adj[p])
            {
                if(dist[it.first]>(dist[p]+it.second))
                    dist[it.first]=dist[p]+it.second;
            }
        }
    }
    
    for(int i=0;i<v;i++)
    {
        if(dist[i]!=INT_MAX)
         cout<<dist[i]<<endl;
        else
            cout<<"inf"<<endl;
    }
}

int main()
{
    graph g(6);
    
    g.addEdge(0, 1, 5);
    g.addEdge(0, 2, 3);
    g.addEdge(1, 3, 6);
    g.addEdge(1, 2, 2);
    g.addEdge(2, 4, 4);
    g.addEdge(2, 5, 2);
    g.addEdge(2, 3, 7);
    g.addEdge(3, 4, -1);
    g.addEdge(4, 5, -2);
    
    g.helper(1);
    
    return 0;
}
